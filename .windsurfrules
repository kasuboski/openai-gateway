## Project Technology
This is a cloudflare worker project. Always read the cloudflare [docs](docs/cloudflare.md) when working on anything cloudflare related.

Cloudflare bindings are autogenerated. Add bindings in `wrangler.jsonc` and run `npm run cf-typegen` to generate types at `worker-configuration.d.ts`. These types are available globally. You don't need to import them. NEVER "augment" the bindings type. If adding a new binding, add it to `wrangler.jsonc` and run `npm run cf-typegen`.

The project uses Typescript. Prefer strongly typed code. Do not use `any` for instance.

Example: when you need a runtime check, use a type-guard to narrow your CF bindings:
```ts
function hasSecret<K extends string>(
  env: CloudflareBindings,
  key: K,
): env is CloudflareBindings & Record<K, string> {
  // biome-ignore lint/suspicious/noExplicitAny: cast as any to further guard type
  return typeof (env as any)[key] === "string";
}
```

We use biome for linting and formatting. Always run `npm run lint` and `npm run format` after making a change.

## Development environment
* All terminal commands should be run prefixed with `direnv exec .`
  Ex. `direnv exec . npx wrangler dev` `direnv exec . npm run cf-typegen`

## Development Workflow
1. Understand the task requested. Research how this task will affect the project. Use context7 to find documentation snippets.
2. Find relevant files to modify.
3. Make changes for the task
4. Run `npm run lint` and `npm run format` to ensure code quality.
5. Run `npm run check` to ensure type safety.
6. Fix any errors surfaced by the check.
7. Repeat
